@using Ambrosuite.ApiService.Entities;
@using Ambrosuite.Web.ServicesWeb;
@using System.Diagnostics
@inject NavigationManager Navigation
@inject PedidosService PedidoService

<div class="text-dark modal fade @(mesa != null ? "show" : "")" style="@(mesa != null ? "display: block;" : "display: none; background: rgba(0, 0, 0, 0.5);")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalles de la Mesa</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (mesa != null)
                {
                    <p><strong>ID:</strong> @mesa.id</p>
                    <p><strong>Estado:</strong> @GetTableStatusClass(mesa)</p>
                    @if (pedidoEnCurso != null)
                    {
                        <div>
                            <h6>Pedido en Curso</h6>
                            <p><strong>Fecha y Hora:</strong> @pedidoEnCurso.fecha_hora?.ToString("dd/MM/yyyy HH:mm")</p>
                            <p><strong>Total:</strong> @pedidoEnCurso.total?.ToString("C")</p>
                            <p><strong>Estado:</strong> @estadoActualDePedido(pedidoEnCurso)</p>
                            <p><strong>Usuario:</strong> @pedidoEnCurso.usuario.nombre @pedidoEnCurso.usuario.apellido</p>
                            <button class="btn btn-warning" @onclick="() => EditarPedido(pedidoEnCurso.id)">Editar Pedido</button>
                            <NavLink class="btn btn-info" href="@($"/pedido/{pedidoEnCurso.id}")">Ver Detalle del Pedido</NavLink>
                            @if (mesa.estado == 1)
                            {
                                <button class="btn btn-danger" @onclick="() => FactPedido(pedidoEnCurso.id)">Facturar</button>
                            }
                        </div>
                    }
                    <div class="modal-actions">
                        <button class="btn btn-primary" @onclick='() => ChangeStatus("Available")' disabled="@(mesa.estado == 0)">Disponible</button>
                        <button class="btn btn-danger" @onclick='() => ChangeStatus("Occupied")' disabled="@(mesa.estado == 1)">Ocupada</button>
                        <button class="btn btn-warning" @onclick='() => ChangeStatus("Reserved")' disabled="@(mesa.estado == 2)">Reservada</button>
                        <button class="btn btn-info" @onclick='() => ChangeStatus("Cleaning")' disabled="@(mesa.estado == 3)">Limpieza</button>
                    </div>
                }
                else
                {
                    <p>No hay datos disponibles</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Mesa? mesa { get; set; }
    [Parameter] public EventCallback CloseModalCallback { get; set; }
    [Parameter] public EventCallback<Mesa> OnMesaUpdated { get; set; }

    private Pedido? pedidoEnCurso;

    protected override async Task OnParametersSetAsync()
    {
        if (mesa != null)
        {
            Debug.WriteLine($"Buscando ultimo pedido: {mesa.id}");
            var pedidos = await PedidoService.GetPedidosByMesaAsync(mesa.id);
            pedidoEnCurso = pedidos.FirstOrDefault();
        }
    }

    private string estadoActualDePedido(Pedido pedido) => pedido.estado switch
    {
        0 => "Pendiente",
        1 => "En Proceso",
        2 => "Completado",
        3 => "Cancelado",
        _ => "Desconocido"
    };

    private async Task ChangeStatus(string newStatus)
    {
        int valorEstado = newStatus switch
        {
            "Available" => 0,
            "Occupied" => 1,
            "Reserved" => 2,
            "Cleaning" => 3,
            _ => 0
        };

        if (mesa != null)
        {
            mesa.estado = valorEstado;
            // Aquí podrías notificar cambios al componente padre si es necesario.
            await OnMesaUpdated.InvokeAsync(mesa);
        }
    }

    private string GetTableStatusClass(Mesa mesa) => mesa.estado switch
    {
        0 => "Disponible",
        1 => "Ocupado",
        2 => "Reservada",
        3 => "Limpieza",
        _ => "unknown"
    };

    private async Task CloseModal()
    {
        await CloseModalCallback.InvokeAsync();
    }

    private void EditarPedido(int pedidoId)
    {
        Navigation.NavigateTo($"/editar-pedido/{pedidoId}");
    }

    private void FactPedido(int pedidoId) { 
        Navigation.NavigateTo($"/facturar-pedido/{pedidoId}");
    }
}
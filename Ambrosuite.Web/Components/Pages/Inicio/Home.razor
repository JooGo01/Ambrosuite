@page "/ambrosuite"
@using Ambrosuite.Web.ServicesWeb
@using Ambrosuite.ApiService.Entities;
@inject MesasService MesasService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Gestión de Mesas</PageTitle>

<div class="layout-container">
    <div class="main-content">
        <div class="top-bar">
            <h1>Gestión de Mesas</h1>
            <div class="search-container">
                <input type="text"
                placeholder="Buscar..."
                @bind="searchQuery"
                @bind:event="oninput"
                aria-label="Buscar mesas" />
                <span class="oi oi-magnifying-glass"></span>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>Cargando mesas...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(error))
        {
            <div class="error-container">
                <span class="oi oi-warning"></span>
                <p>Error al cargar las mesas: @error</p>
                <button class="retry-button" @onclick="LoadTables">Reintentar</button>
            </div>
        }
        else
        {
            <div class="tables-grid">
                @foreach (var table in FilteredTables())
                {
                    <div class="table-item @GetTableStatusClass(table)">
                        <div class="table-circle">
                            <span class="table-number">@table.id</span>
                            @foreach (var chair in Enumerable.Range(1, 4))
                            {
                                <div class="chair chair-@chair"></div>
                            }
                        </div>
                        <div class="table-info">
                            @switch (table.estado)
                            {
                                case 0:
                                    <span class="status-badge">Disponible</span>
                                    break;
                                case 1:
                                    <span class="status-badge">Ocupada</span>
                                    break;
                                case 2:
                                    <span class="status-badge">Reservada</span>
                                    break;
                                case 3:
                                    <span class="status-badge">Limpieza</span>
                                    break;
                                default:
                                    <span class="status-badge">Estado desconocido</span>
                                    break;
                            }
                        </div>
                        <div class="visual-boton">
                            <button class="btn btn-primary" @onclick='() => HandleTableClick(table.id)'>
                                Ver detalles
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Modal de Mesas -->
@if (isVisible)
{
    <MesasModal mesa="tables.FirstOrDefault(t => t.id == selectedTableId)" CloseModalCallback="CloseModal" OnMesaUpdated="HandleMesaUpdated" />
}


@code {
    private string searchQuery = string.Empty;
    private List<Mesa> tables = new();
    private bool isLoading = true;
    private bool isVisible = false;
    private string? error;
    private int selectedTableId; // ID de la mesa seleccionada

    protected override async Task OnInitializedAsync()
    {
        await LoadTables();
    }

    private string GetTableStatusClass(Mesa mesa) => mesa.estado switch
    {
        0 => "available",
        1 => "occupied",
        2 => "reserved",
        3 => "cleaning",
        _ => "unknown"
    };

    private async Task LoadTables()
    {
        try
        {
            isLoading = true;
            error = null;
            tables = await MesasService.GetTablesAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener las mesas: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleTableClick(int id)
    {
        System.Diagnostics.Debug.WriteLine($"HandleTableClick ejecutado. ID de mesa: {id}");
        selectedTableId = id;
        isVisible = true;
        StateHasChanged();
    }

    private IEnumerable<Mesa> FilteredTables()
    {
        return tables.Where(t => string.IsNullOrWhiteSpace(searchQuery)
                                 || t.id.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
    }

    private void CloseModal()
    {
        isVisible = false;
        StateHasChanged();
    }

    private async Task HandleMesaUpdated(Mesa updatedMesa)
    {
        try
        {
            await MesasService.updateTableAsync(updatedMesa);
            var mesa = tables.FirstOrDefault(t => t.id == updatedMesa.id);
            if (mesa != null)
            {
                mesa.estado = updatedMesa.estado;
            }
        }
        catch (Exception ex)
        {
            error = $"Error al actualizar la mesa: {ex.Message}";
        }
        finally
        {
            isVisible = false;
            StateHasChanged();
        }
    }
}
@page "/"
@using Ambrosuite.Web.ServicesWeb
@using Ambrosuite.ApiService.Entities;
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer



<div class="home-background">
    <div class="overlay text-center text-white d-flex flex-column justify-content-center align-items-center">
        <h1 class="display-4 fw-bold">¡Hola!</h1>
        <p class="lead">Bienvenido a <strong>Ambrosuite</strong></p>

        <div class="card bg-dark bg-opacity-75 border-0 rounded-4 mt-4 p-4 shadow">
            <h5 class="card-title fw-bold">¿Qué querés hacer hoy?</h5>
            <p class="card-text text-light">Utilizá el menú lateral para gestionar pedidos, inventario y más funciones.</p>
            @if (UserRole.Equals("Administracion") || UserRole.Equals("Mozo"))
            {
                <a href="/ambrosuite" class="btn btn-outline-light rounded-pill px-4 mt-2">
                    Ver Mapa de Mesas
                </a>
            }
            else
            {
                <a href ="/pedidos-activos" class="btn btn-outline-light rounded-pill px-4 mt-2">
                    Ver Pedidos Activos
                </a>
            }
        </div>
    </div>
</div>

@code {
    private bool isAuthenticated = false;

    [Inject]
    private AuthService authService { get; set; }

    private string UserRole { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Este método se ejecuta solo una vez al inicio
        await CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        if (isBrowser)
        {
            // Solo realizar la llamada si estamos en el cliente
            isAuthenticated = await AuthService.IsAuthenticatedAsync();

            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    // Indicador para saber si estamos en el cliente
    private bool isBrowser = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserRole = await authService.GetRoleAsync();
            StateHasChanged(); // Forzar actualización del UI después de obtener el rol
            isBrowser = true;
            await CheckAuthentication();
        }
    }
}
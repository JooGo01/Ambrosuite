@page "/abm/receta"
@using Ambrosuite.ApiService.Entities;
@using Ambrosuite.Web.ServicesWeb;
@using System.Diagnostics;
@inject RecetaService recetaService
@inject IngredientesService ingredienteService
@inject ProductosService productoService
@rendermode InteractiveServer

<div class="layout-container">
    <div class="main-content text-black">
        <h3>Gestión de Receta</h3>

        <button class="btn btn-primary" @onclick="MostrarFormularioAgregar">Agregar Receta</button>

        @if (mostrarFormulario)
        {
            <!-- Formulario para agregar o modificar una receta -->
            <EditForm Model="receta" OnValidSubmit="GuardarReceta">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <!-- Selector de Producto Final -->
                    <label for="producto_final_id">Producto</label>
                    <InputSelect id="producto_final_id" class="form-control" @bind-Value="receta.producto_final_id">
                        @foreach (var productoFinal in listaProducto)
                        {
                            <option value="@productoFinal.id">@productoFinal.nombre</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <!-- Selector de Ingrediente -->
                    <label for="ingrediente_id">Ingrediente</label>
                    <InputSelect id="ingrediente_id" class="form-control" @bind-Value="receta.ingrediente_id">
                        @foreach (var ing in listaIngrediente)
                        {
                            <option value="@ing.id">@ing.nombre</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <!-- Campo para la cantidad -->
                    <label for="cantidad">Cantidad</label>
                    <InputNumber id="cantidad" class="form-control" @bind-Value="receta.cantidad"/>
                </div>

                <div class="form-group">
                    <!-- Descripción opcional -->
                    <label for="descripcion">Descripcion</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="receta.descripcion" />
                </div>

                <div class="form-group">
                    <!-- Botones de acción -->
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                </div>
            </EditForm>
        }

        <table class="table table-dark">
            <!-- Tabla que lista las recetas existentes -->
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Ingrediente</th>
                    <th>Cantidad</th>
                    <th>Descripcion</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var rec in listaReceta)
                {
                    <tr>
                        <td>@rec.producto_final.nombre</td>
                        <td>@rec.ingrediente.nombre</td>
                        <td>@rec.cantidad</td>
                        <td>@rec.descripcion</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => MostrarFormularioModificar(rec)">Modificar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarReceta(rec)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private List<Receta> listaReceta = new();
    private List<Ingrediente> listaIngrediente = new();
    private List<ProductoFinal> listaProducto = new();
    private bool isLoading = true;
    private bool isVisible = false;
    private string? error;
    private Receta receta = new Receta  // Modelo del formulario
		{
			producto_final_id = 0,
			ingrediente_id = 0,
			cantidad = 0,
			descripcion = string.Empty
		}; 
    private bool mostrarFormulario = false; // Controla visibilidad del formulario
    private bool esNuevoRegistro = true; // Alta o modificación

    protected override async Task OnInitializedAsync()  // Al iniciar la página, se cargan los datos necesarios
    {
        await LoadProducto();
        await LoadIngredientes();
        await LoadReceta();

        if (listaProducto.Any()) // Si hay productos e ingredientes, se inicializan por defecto
        {
            receta.producto_final_id = listaProducto.First().id;
        }

        if (listaIngrediente.Any())
        {
            receta.ingrediente_id = listaIngrediente.First().id;
        }
    }

    private async Task LoadReceta() // Carga todas las recetas
    {
        try
        {
            isLoading = true;
            error = null;
            listaReceta = await recetaService.GetRecetaAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener las recetas: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadProducto() // Carga los productos
    {
        try
        {
            isLoading = true;
            error = null;
            listaProducto = await productoService.GetProductosAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener los productos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadIngredientes() // Carga los ingredientes
    {
        try
        {
            isLoading = true;
            error = null;
            listaIngrediente = await ingredienteService.GetIngredienteAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener los ingredientes: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void MostrarFormularioAgregar() // Muestra el formulario en modo "agregar"
    {
        receta = new Receta
            {
                producto_final_id = 0,
                ingrediente_id = 0,
                cantidad = 0,
                descripcion = string.Empty
            };
        esNuevoRegistro = true;
        mostrarFormulario = true;
    }

    private void MostrarFormularioModificar(Receta p_receta)  // Muestra el formulario con datos cargados para modificar
    {
        receta = p_receta;
        esNuevoRegistro = false;
        mostrarFormulario = true;
    }

    private async Task GuardarReceta()   // Guarda la receta, alta o modificación según corresponda
    {
        if (esNuevoRegistro)
        {
            await recetaService.agregarRecetaAsync(receta);
        }
        else
        {
            await recetaService.updateRecetaAsync(receta);
        }
        listaReceta = await recetaService.GetRecetaAsync(); // Actualiza la lista y oculta el formulario
        mostrarFormulario = false;
    }

    private void Cancelar()   // Cancela el formulario
    {
        mostrarFormulario = false;
    }

    private async Task EliminarReceta(Receta p_receta)  // Elimina una receta
    {
        await recetaService.bajaRecetaAsync(p_receta);
        listaReceta = await recetaService.GetRecetaAsync();
    }
}

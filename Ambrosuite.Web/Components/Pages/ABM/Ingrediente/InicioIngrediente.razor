@page "/abm/ingrediente"
@using Ambrosuite.ApiService.Entities;
@using Ambrosuite.Web.ServicesWeb;
@using System.Diagnostics;
@inject IngredientesService IngredienteService
@rendermode InteractiveServer

<div class="layout-container">
    <div class="main-content text-black">
        <h3>Gestión de Ingredientes</h3>

        <button type="submit" class="btn btn-primary" @onclick="MostrarFormularioAgregar">Agregar Ingrediente</button>  <!-- Botón que abre el formulario para agregar un nuevo ingrediente -->

        @if (mostrarFormulario)
        {
            <EditForm Model="ingrediente" OnValidSubmit="GuardarIngrediente">
                <!-- Formulario para agregar o modificar un ingrediente -->
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="nombre">Nombre</label>
                    <InputText id="nombre" class="form-control" @bind-Value="ingrediente.nombre" />
                </div>
                <div class="form-group">
                    <label for="descripcion">Descripcion</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="ingrediente.descripcion" />
                </div>
                <div class="form-group">
                    <label for="marca">Marca</label>
                    <InputText id="marca" class="form-control" @bind-Value="ingrediente.marca" />
                </div>
                <div class="form-group">
                    <label for="alertaCantidad">Alerta Cantidad</label>
                    <InputNumber id="alertaCantidad" class="form-control" @bind-Value="ingrediente.alertaCantidad" />
                </div>
                <button type="submit" class="btn btn-success">Guardar</button> <!-- Botones para guardar o cancelar -->
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
            </EditForm>
        }

        <table class="table table-dark">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Marca</th>
                    <th>Alerta Cantidad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ing in listaIngrediente)
                {
                    <tr>
                        <td>@ing.nombre</td>
                        <td>@ing.descripcion</td>
                        <td>@ing.marca</td>
                        <td>@ing.alertaCantidad</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => MostrarFormularioModificar(ing)">Modificar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarIngrediente(ing)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private List<Ingrediente> listaIngrediente = new();  // Modelo para el formulario (agregar o modificar)
    private bool isLoading = true;
    private bool isVisible = false;
    private string? error;
    private Ingrediente ingrediente = new Ingrediente
		{
			nombre = string.Empty,
			descripcion = string.Empty,
			marca = string.Empty,
            alertaCantidad=0,
            estado=0
		};
    private bool mostrarFormulario = false; // Controla la visibilidad del formulario
    private bool esNuevoRegistro = true; // Indica si es un alta o una modificación

    protected override async Task OnInitializedAsync() // Carga inicial de la lista de ingredientes al renderizar la página
    {
        await LoadIngredientes();
    }

    private async Task LoadIngredientes() // Obtiene la lista de ingredientes desde el servicio
    {
        try
        {
            isLoading = true;
            error = null;
            listaIngrediente = await IngredienteService.GetIngredienteAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener los ingredientes: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void MostrarFormularioAgregar()  // Muestra el formulario vacío para agregar un nuevo ingrediente
    {
        ingrediente = new Ingrediente
        {
            nombre = string.Empty,
            descripcion = string.Empty,
            marca = string.Empty,
            alertaCantidad = 0,
            estado = 0
        };
        esNuevoRegistro = true;
        mostrarFormulario = true;
    }

    private void MostrarFormularioModificar(Ingrediente p_ingrediente) // Muestra el formulario con los datos de un ingrediente para modificarlo
    {
        ingrediente = p_ingrediente;
        esNuevoRegistro = false;
        mostrarFormulario = true;
    }

    private async Task GuardarIngrediente() // Guarda el ingrediente: si es nuevo lo agrega, si existe lo actualiza
    {
        if (esNuevoRegistro)
        {
            await IngredienteService.agregarIngredienteAsync(ingrediente);
        }
        else
        {
            await IngredienteService.updateIngredienteAsync(ingrediente);
        }
        listaIngrediente = await IngredienteService.GetIngredienteAsync();  // Actualiza la lista después de guardar y oculta el formulario
        mostrarFormulario = false;
    }

    private void Cancelar() // Cancela la operación y oculta el formulario
    {
        mostrarFormulario = false;
    }

    private async Task EliminarIngrediente(Ingrediente p_ingrediente)  // Elimina el ingrediente seleccionado y actualiza la lista
    {
        await IngredienteService.deleteIngredienteAsync(p_ingrediente);
        listaIngrediente = await IngredienteService.GetIngredienteAsync();
    }
}

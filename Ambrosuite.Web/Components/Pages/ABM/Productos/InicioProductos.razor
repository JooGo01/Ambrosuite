@page "/abm/productos"
@using Ambrosuite.ApiService.Entities;
@using Ambrosuite.Web.ServicesWeb;
@using System.Diagnostics;
@inject ProductosService productoService
@rendermode InteractiveServer

<div class="layout-container">
    <div class="main-content text-black">
        <h3>Gestión de Productos</h3>

        <button type="submit" class="btn btn-primary" @onclick="MostrarFormularioAgregar">Agregar Producto</button>   <!-- Botón para abrir el formulario de alta de producto -->

        @if (mostrarFormulario)
        {
            <!-- Formulario para agregar o modificar un producto -->
            <EditForm Model="producto" OnValidSubmit="GuardarProducto">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="nombre">Nombre</label>
                    <InputText id="nombre" class="form-control" @bind-Value="producto.nombre" />
                </div>
                <div class="form-group">
                    <label for="descripcion">Descripcion</label>
                    <InputText id="descripcion" class="form-control" @bind-Value="producto.descripcion" />
                </div>
                <div class="form-group">
                    <label for="precio">Precio</label>
                    <InputNumber id="precio" class="form-control" @bind-Value="producto.precio" />
                </div>  <!-- Botones para guardar o cancelar -->
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
            </EditForm>
        }

        <table class="table table-dark">
            <!-- Tabla que muestra la lista de productos -->
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Precio</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prod in listaProductos)
                {
                    <tr>
                        <td>@prod.nombre</td>
                        <td>@prod.descripcion</td>
                        <td>@prod.precio</td>
                        <td>
                            <!-- Botones para modificar o eliminar el producto -->
                            <button class="btn btn-warning" @onclick="() => MostrarFormularioModificar(prod)">Modificar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarProducto(prod)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private List<ProductoFinal> listaProductos = new(); // Lista de productos que se muestran en la tabla
    private bool isLoading = true;
    private bool isVisible = false;
    private string? error;
    private ProductoFinal producto = new ProductoFinal
		{
			nombre = string.Empty,
			descripcion = string.Empty,
			precio = 0,
			estado = 0
		};
    private bool mostrarFormulario = false; // Controla la visibilidad del formulario
    private bool esNuevoRegistro = true; // Indica si es un alta o una modificación

    protected override async Task OnInitializedAsync()  // Método que se ejecuta al inicializar la página
    {
        await LoadProductos();
    }

    private async Task LoadProductos()
    {
        try
        {
            isLoading = true;
            error = null;
            listaProductos = await productoService.GetProductosAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener los productos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void MostrarFormularioAgregar()  // Muestra el formulario vacío para agregar un nuevo producto
    {
        producto = new ProductoFinal
            {
                nombre = string.Empty,
                descripcion = string.Empty,
                precio = 0,
                estado = 0
            };
        esNuevoRegistro = true;
        mostrarFormulario = true;
    }

    private void MostrarFormularioModificar(ProductoFinal p_producto) // Muestra el formulario con los datos de un producto para modificarlo
    {
        producto = p_producto;
        esNuevoRegistro = false;
        mostrarFormulario = true;
		// selectedCategoriaId = p_producto.categoriaId;
    }

    private async Task GuardarProducto()  // Guarda el producto (si es nuevo lo crea, si existe lo actualiza)
    {
        if (esNuevoRegistro)
        {
            await productoService.agregarProductoAsync(producto);
        }
        else
        {
            await productoService.updateProductoAsync(producto);
        }
        listaProductos = await productoService.GetProductosAsync();  // Actualiza la lista y oculta el formulario
        mostrarFormulario = false;
    }

    private void Cancelar() // Cancela y oculta el formulario
    {
        mostrarFormulario = false;
    }

    private async Task EliminarProducto(ProductoFinal p_producto) // Elimina un producto y recarga la lista
    {
        await productoService.deleteProductoAsync(p_producto);
        listaProductos = await productoService.GetProductosAsync();
    }
}

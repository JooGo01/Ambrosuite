@page "/abm/categoria"
@using Ambrosuite.ApiService.Entities;
@using Ambrosuite.Web.ServicesWeb;
@using System.Diagnostics;
@inject CategoriasService CategoriaService
@rendermode InteractiveServer

<div class="layout-container">
    <div class="main-content text-black">
        <h3>Gestión de Categoria Producto</h3>

        <button class="btn btn-primary" @onclick="MostrarFormularioAgregar">Agregar Categoria Producto</button>

        @if (mostrarFormulario)
        {
            <EditForm Model="categoria" OnValidSubmit="GuardarCategoria">
                <!-- Formulario para agregar o modificar una categoría -->
                <DataAnnotationsValidator /> 
                <ValidationSummary />

                <div class="form-group">
                    <label for="nombre">Nombre Categoria</label>
                    <InputText id="nombre" class="form-control" @bind-Value="categoria.nombre" />
                </div>

                <div class="form-group">
                    <!-- Botones para guardar o cancelar -->
                    <input value="0" id="estado" name="estado" type="hidden"/>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-success">Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
                </div>
            </EditForm>
        }

        <table class="table table-dark">
            <!-- Tabla que muestra las categorías existentes -->
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var categoria in listaCategoria)
                {
                    <tr>
                        <td>@categoria.nombre</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => MostrarFormularioModificar(categoria)">Modificar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarCategoria(categoria)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private List<Categoria> listaCategoria = new();   // Lista de categorías que se muestran en la tabla
         private bool isLoading = true;
         private bool isVisible = false;
         private string? error;
         private Categoria categoria = new Categoria
        {
            nombre = string.Empty,
            estado = 0
        };
    private bool mostrarFormulario = false;
    private bool esNuevoRegistro = true;

    protected override async Task OnInitializedAsync() // Se ejecuta al iniciar la página, carga las categorías
    {
        await LoadCategoria();
    }

    private async Task LoadCategoria() // Obtiene la lista de categorías desde el servicio
    {
        try
        {
            isLoading = true;
            error = null;
            listaCategoria = await CategoriaService.GetCategoriaAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener los roles: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void MostrarFormularioAgregar() // Muestra el formulario vacío para agregar una nueva categoría
    {
        categoria = new Categoria
            {
                nombre = string.Empty,
                estado = 0
            };
        esNuevoRegistro = true;
        mostrarFormulario = true;
    }

    private void MostrarFormularioModificar(Categoria p_categoria) // Muestra el formulario con los datos de la categoría seleccionada para modificarla
    {
        categoria = p_categoria;
        esNuevoRegistro = false;
        mostrarFormulario = true;
    }

    private async Task GuardarCategoria()  // Guarda la categoría: agrega o actualiza según corresponda
    {
        if (esNuevoRegistro)
        {
            await CategoriaService.agregarCategoriaAsync(categoria);
        }
        else
        {
            await CategoriaService.updateCategoriaAsync(categoria);
        }
        listaCategoria = await CategoriaService.GetCategoriaAsync(); // Actualiza la lista después de guardar y oculta el formulario
        mostrarFormulario = false;
    }

    private void Cancelar()  // Cancela la operación y oculta el formulario
    {
        mostrarFormulario = false;
    }

    private async Task EliminarCategoria(Categoria p_categoria) // Elimina la categoría seleccionada y actualiza la lista
    {
        await CategoriaService.deleteCategoriaAsync(p_categoria);
        listaCategoria = await CategoriaService.GetCategoriaAsync();
    }
}

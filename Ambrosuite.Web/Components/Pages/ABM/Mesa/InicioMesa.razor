@page "/abm/mesa"
@using Ambrosuite.ApiService.Entities;
@using Ambrosuite.Web.ServicesWeb;
@using System.Diagnostics;
@inject MesasService MesasService
@rendermode InteractiveServer

<div class="layout-container">
    <div class="main-content text-black">
        <h3>Gestión de Mesas</h3>

        <button class="btn btn-primary" @onclick="MostrarFormularioAgregar">Agregar Mesa</button>

        @if (mostrarFormulario)
        {
            <EditForm Model="mesa" OnValidSubmit="GuardarMesa">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="estado">Estado Mesa</label>
                    <InputSelect id="estado" class="form-control" @bind-Value="mesa.estado">
                    @foreach (var status in listEstado)
                    {
                        <option value="@status.num_estado">@status.descripcion</option>
                    }
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
            </EditForm>
        }

        <table class="table table-dark">
            <!-- Tabla que muestra las mesas existentes -->
            <thead>
                <tr>
                    <th>#</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mesa in listaMesa)
                {
                    <tr>
                        <td>@mesa.id</td>
                        <td>@estadoActualDePedido(mesa.estado ?? 0)</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => MostrarFormularioModificar(mesa)">Modificar</button>  <!-- Botón para modificar una mesa -->
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private List<Mesa> listaMesa = new();
	private List<EstadoMesas> listEstado = new();
    private bool isLoading = true;
    private bool isVisible = false;
    private string? error;
    private Mesa mesa = new Mesa
        {
			estado=0
        };
    private bool mostrarFormulario = false;
    private bool esNuevoRegistro = true;

    protected override async Task OnInitializedAsync() // Carga inicial de las mesas y los estados al renderizar la página
    {
        await LoadMesa();
        await LoadEstadoMesas();

        if (listEstado.Any()) // Si hay estados cargados, se selecciona el primero por defecto
        {
            mesa.estado = listEstado.First().num_estado;
        }
    }

    private async Task LoadEstadoMesas() // Genera la lista de estados posibles para las mesas
	{
		try
		{
			for (int i = 0; i < 4; i++)
			{
			    EstadoMesas estado = new EstadoMesas{
                    num_estado=i,
                    descripcion = estadoActualDePedido(i)
                };
				listEstado.Add(estado);
			}
		}
		catch (Exception ex)
		{
			error = $"Error al obtener los roles: {ex.Message}";
		}
		finally
		{
			isLoading = false;
		}
	}

    private string estadoActualDePedido(int estado) => estado switch // Retorna la descripción textual de un estado según su número
	{
		0 => "Disponible",
		1 => "Ocupada",
		2 => "Reservada",
		3 => "Limpieza",
		_ => "Desconocido"
	};

    private async Task LoadMesa()   // Carga la lista de mesas desde el servicio
    {
        try
        {
            isLoading = true;
            error = null;
            listaMesa = await MesasService.GetTablesAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al obtener los roles: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task MostrarFormularioAgregar() // Muestra el formulario vacío para agregar una nueva mesa
    {
        mesa = new Mesa
            {
                estado = 0   
            };
        esNuevoRegistro = true;
        mostrarFormulario = false;
        await GuardarMesa();
    }

    private void MostrarFormularioModificar(Mesa p_mesa) // Muestra el formulario con los datos de una mesa para modificarla
    {
        mesa = p_mesa;
        esNuevoRegistro = false;
        mostrarFormulario = true;
    }

    private async Task GuardarMesa() // Guarda la mesa: si es nueva, la crea; si existe, la actualiza
    {
        if (esNuevoRegistro)
        {
            await MesasService.createTableAsync();
        }
        else
        {
            await MesasService.updateTableAsync(mesa);
        }
        listaMesa = await MesasService.GetTablesAsync(); // Actualiza la lista y oculta el formulario
        mostrarFormulario = false;
    }

    private void Cancelar() // Cancela y oculta el formulario
    {
        mostrarFormulario = false;
    }
}
